
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // A user is an admin if they are authenticated and their document
    // in the 'users' collection has a field 'isAdmin' set to true.
    function isAdmin() {
      // Use .get('isAdmin', false) to safely default to false if the field doesn't exist.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isAdmin', false) == true;
    }

    // Rules for the 'users' collection.
    match /users/{userId}/{path=**} {
      // A user can read and write to their own documents.
      // An admin can read and write to any user's documents.
      allow read, write: if request.auth.uid == userId || isAdmin();
    }

    // Rules for the 'applications' subcollection (drafts).
    // This explicit rule is good practice for collectionGroup queries by admins.
    match /{path=**}/application/{docId} {
      allow list: if isAdmin();
    }
    
    // Rules for creating new appointments.
    match /appointments/{apptId} {
      // Any authenticated user can create (book) an appointment,
      // as long as they are booking it for themselves.
      allow create: if request.auth != null && request.resource.data.studentUid == request.auth.uid;

      // Only an admin can read the full list of appointments or update/delete them.
      allow read, update, delete: if isAdmin();
    }

    // Rules for sending mail. Only admins can trigger emails.
    match /mail/{docId} {
      allow create: if isAdmin();
    }

    // Rules for admin-only settings.
    match /settings/{docId} {
      allow read, write: if isAdmin();
    }
    match /news/{docId} {
      allow read, write: if isAdmin();
    }
  }
}
