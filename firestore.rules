
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for the admin custom claim on the user's token.
    function isAdmin() {
      return request.auth.token.admin == true;
    }

<<<<<<< HEAD
    // Rules for the 'users' collection and all sub-documents.
    match /users/{userId}/{path=**} {
      // A user can always read and write to their own documents.
      // An admin can read and write to any user's documents.
      allow read, write: if request.auth.uid == userId || isAdmin();
=======
    // Rules for the 'users' collection
    match /users/{userId} {
      // Users can create their own profile.
      allow create: if request.auth.uid == userId;
      // Users can read and update their own profile. Admins can read/update any user profile.
      allow read, update: if request.auth.uid == userId || isAdmin();

      // Rules for subcollections within a user document
      match /application/draft {
        allow read, write: if request.auth.uid == userId || isAdmin();
      }
      match /documents/{docId} {
        allow read, write: if request.auth.uid == userId || isAdmin();
      }
      match /messages/{messageId} {
        // Users and Admins can create and read messages.
        allow read, create: if request.auth.uid == userId || isAdmin();
      }
      match /payments/{paymentId} {
        // Users can only read their own payment history. Admins can read anyone's.
        allow read: if request.auth.uid == userId || isAdmin();
      }
      match /quizResults/{resultId} {
        // Users can read/write their own quiz results. Admins can too.
        allow read, write: if request.auth.uid == userId || isAdmin();
      }
      match /auditLogs/{logId} {
        // Users can create audit log entries and read their own logs. Admins can read all.
        allow read: if request.auth.uid == userId || isAdmin();
        allow create: if request.auth.uid == userId;
      }
>>>>>>> 7c30f66482da59a66d9bea758a6130ee327868cb
    }

    // Rules for the top-level 'applications' collection (for submitted apps).
    match /applications/{appId} {
      // A user can create their application document upon final submission.
      // The userId on the new document must match the user's own uid.
      allow create: if request.auth.uid == request.resource.data.userId;

      // An admin can perform any action on submitted applications.
      // A user can also read their own submitted application.
      allow read: if resource.data.userId == request.auth.uid || isAdmin();
      allow update, delete: if isAdmin();
    }

    // Rules for top-level 'appointments' collection.
    match /appointments/{appointmentId} {
      // Admins can list the entire collection and delete any appointment.
      allow list, delete: if isAdmin();

      // Authenticated users can create their own appointments.
      // The `userId` field in the document must match their own UID.
      allow create: if request.auth.uid == request.resource.data.userId;

      // An individual appointment can be read or updated if the user is the owner OR is an admin.
      allow get, update: if request.auth.uid == resource.data.userId || isAdmin();
    }

    // Rules for other admin-only or specific collections.
    match /settings/{docId} {
        // Any authenticated user can read settings (e.g., appointment availability).
        allow read: if request.auth != null;
        // Only admins can change settings.
        allow write: if isAdmin();
    }

    match /news/{docId} {
      allow read, write: if isAdmin();
    }

    // Rules for the 'forumPosts' collection
    match /forumPosts/{postId} {
      allow read: if true;
      allow create: if request.auth.uid != null;
      allow delete, update: if request.auth.token.admin == true;
    }

    // Rules for the 'learningHub' collection
    match /learningHub/{docId} {
      allow read: if true;
      allow write: if request.auth.token.admin == true;
    }
  }
}
