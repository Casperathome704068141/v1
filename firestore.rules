rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      // This function relies on a custom claim set on the user's auth token.
      // This is the most secure method but requires server-side setup to assign the claim.
      return request.auth.token.admin == true;
    }

    match /users/{userId}/{path=**} {
      allow read, write: if request.auth.uid == userId || isAdmin();
    }

    match /applications/{appId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read: if resource.data.userId == request.auth.uid || isAdmin();
      allow update, delete: if isAdmin();
    }

    match /mail/{docId} {
      allow create: if isAdmin();
    }
    
    match /appointments/{appointmentId} {
      // Any authenticated user can create an appointment for themselves.
      // The `userId` field in the new document must match their own UID.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // WARNING: THIS IS A TEMPORARY RULE FOR DEBUGGING
      // It allows ANY logged-in user to read all appointments.
      // This is NOT secure for production.
      allow read: if request.auth != null;
      
      // Update/delete should still be admin-only.
      allow update, delete: if isAdmin();
    }

    match /settings/{docId} {
      allow read, write: if isAdmin();
    }
    
    match /news/{docId} {
      allow read, write: if isAdmin();
    }
  }
}
