rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for the admin custom claim on the user's token.
    function isAdmin() {
      return request.auth.token.admin == true;
    }

    // Rules for the 'users' collection and all sub-documents.
    match /users/{userId}/{path=**} {
      // A user can always read and write to their own documents.
      // An admin can read and write to any user's documents.
      allow read, write: if request.auth.uid == userId || isAdmin();
    }

    // Rules for the single 'application' document that each user has.
    match /users/{userId}/application/{draftId} {
       // A user can update their own application draft.
       allow write: if request.auth.uid == userId;
       // Admins can read all application drafts for the admin panel list.
       allow read: if request.auth.uid == userId || isAdmin();
    }

    // Rules for the top-level 'applications' collection (DEPRECATED but kept for safety).
    match /applications/{appId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read: if resource.data.userId == request.auth.uid || isAdmin();
      allow update, delete: if isAdmin();
    }
    
    // Rules for sending mail. Only admins can trigger emails.
    match /mail/{docId} {
      allow create: if isAdmin();
    }

    // Rules for the 'appointments' collection.
    match /appointments/{apptId} {
      // Any authenticated user can create (book) an appointment,
      // as long as they are booking it for themselves.
      allow create: if request.auth != null && request.resource.data.studentUid == request.auth.uid;

      // Only an admin can read the full list of appointments or update/delete them.
      allow read, update, delete: if isAdmin();
    }

    // Rules for other admin-only collections.
    match /settings/{docId} {
      allow read, write: if isAdmin();
    }
    match /news/{docId} {
      allow read, write: if isAdmin();
    }
  }
}
